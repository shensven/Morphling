name: Distribution

on:
  push:
    branches:
      - "main"

concurrency:
  group: ${{ github.ref }}

jobs:
  get-bundle-version:
    if: ${{ github.repository_owner == 'shensven' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "Serverless"
    outputs:
      BUNDLE_VERSION: ${{ steps.console-bundle-version.outputs.BUNDLE_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Restore private key
        run: echo "${{ secrets.APP_STORE_CONNECT_API_PRIVATE_KEY }}" > privateKey.p8

      - name: Console bundle version
        id: console-bundle-version
        env:
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        run: |
          BUNDLE_VERSION=$(node index.js)
          echo "BUNDLE_VERSION=$BUNDLE_VERSION" >> $GITHUB_OUTPUT

  distribution:
    needs: get-bundle-version
    runs-on: macos-12
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Echo Xcode version
        run: xcodebuild -version

      - name: Restore profile
        env:
          APPLE_DISTRIBUTION_P12_BASE64: ${{ secrets.APPLE_DISTRIBUTION_P12_BASE64 }}
          APPLE_DISTRIBUTION_P12_PASSWORD: ${{ secrets.APPLE_DISTRIBUTION_P12_PASSWORD }}
          MAC_INSTALLER_DISTRIBUTION_P12_BASE64: ${{ secrets.MAC_INSTALLER_DISTRIBUTION_P12_BASE64 }}
          MAC_INSTALLER_DISTRIBUTION_P12_PASSWORD: ${{ secrets.MAC_INSTALLER_DISTRIBUTION_P12_PASSWORD }}
          PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.APPLE_DISTRIBUTION_P12_PASSWORD }}

        run: |
          APPLE_DISTRIBUTION_P12_PATH=${{ runner.temp }}/apple_distribution.p12
          MAC_INSTALLER_DISTRIBUTION_P12_PATH=${{ runner.temp }}/mac_installer_distribution.p12
          PROVISIONING_PROFILE_PATH=${{ runner.temp }}/pp.provisionprofile
          KEYCHAIN_PATH=${{ runner.temp }}/app_signing.keychain-db
          echo -n "$APPLE_DISTRIBUTION_P12_BASE64" | base64 --decode --output $APPLE_DISTRIBUTION_P12_PATH
          echo -n "$MAC_INSTALLER_DISTRIBUTION_P12_BASE64" | base64 --decode --output $MAC_INSTALLER_DISTRIBUTION_P12_PATH
          echo -n "$PROVISIONING_PROFILE_BASE64" | base64 --decode --output $PROVISIONING_PROFILE_PATH
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PROVISIONING_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles/pp.provisionprofile
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 3600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security import $APPLE_DISTRIBUTION_P12_PATH -P "$APPLE_DISTRIBUTION_P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $MAC_INSTALLER_DISTRIBUTION_P12_PATH -P "$MAC_INSTALLER_DISTRIBUTION_P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
      - name: Set a new bundle version
        run: |
          _BUNDLE_VERSION=${{ needs.get-bundle-version.outputs.BUNDLE_VERSION }}
          agvtool new-version -all $((_BUNDLE_VERSION + 1))
      - name: Archive
        run: |
          xcodebuild archive \
            -project Morphling.xcodeproj \
            -scheme Morphling \
            -archivePath ${{ runner.temp }}/Export/Morphling.xcarchive \
            -allowProvisioningUpdates \
            -destination generic/platform=macOS \
            -configuration Release
      - name: Export
        run: |
          xcodebuild -exportArchive \
            -archivePath ${{ runner.temp }}/Export/Morphling.xcarchive \
            -exportPath ${{ runner.temp }}/Export \
            -exportOptionsPlist Morphling/ExportOptions.plist \
            -allowProvisioningUpdates \
            -destination generic/platform=macOS \
            -configuration Release
      - name: Upload
        run: |
          xcrun altool --upload-app \
          --type macos \
          --file "${{ runner.temp }}/Export/Morphling.pkg" \
          --username "${{ secrets.APPLE_ID }}" \
          --password "${{ secrets.APPLE_ID_PASS }}"
